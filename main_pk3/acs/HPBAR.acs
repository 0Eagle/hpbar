#library "HPBAR"
#include "zcommon.acs"

//The maximum number of players connected to the server.
#define MAX_CLIENT_COUNT 	64
int MaxClientsCount = 0;

#define INT_MAX							2147483647
#define STYLE_FULL						1
#define STYLE_MINIMAL					2
#define LINEBAR_TIC_ACTIVE				105

#define ANNOUNCER_HOLDTIME				5.0
#define ANNOUNCER_FADETIME				0.5

#define FULL_HUD_WIDTH					800
#define FULL_HUD_HEIGHT					600
#define FULL_HOLDTIME					0.25
#define FULL_FADETIME					0.2
#define FULL_FADETIME_SECOND			0.025
#define FULL_HPBAR_X					400.0
#define FULL_HPBAR_Y					40.0
#define FULL_HPBAR_X_OFFSET				5.0
#define FULL_HPBAR_Y_OFFSET				0.0
#define FULL_NAME_Y						(FULL_HPBAR_Y + 25.0)
#define FULL_INFO_Y						(FULL_NAME_Y + 12.0)

#define MINIMAL_HUD_WIDTH				1280
#define MINIMAL_HUD_HEIGHT				960
#define MINIMAL_HOLDTIME				1.0
#define MINIMAL_FADETIME				0.2
#define MINIMAL_HP_X					640.0
#define MINIMAL_HP_Y					500.0

#define TRACKER_HOLDTIME				0.2
#define TRACKER_FADETIME				0.1

#define MAX_TRACKERS					32
#define NUM_RANKINGS					10

#define FLAG_FRIENDLY					1
#define FLAG_REFLECTIVE					2
#define FLAG_INVULNERABLE				4
#define FLAG_GHOST						8
#define FLAG_INVISIBLE					16
#define FLAG_STEALTH					32
#define FLAG_DEAD						64

//Шрифт по умолчанию
#define DEFAULT_FONT					"SMALLFONT"
//Text ID
#define HUD_TEXT_PERCENT_ID				6000
#define HUD_LINE_PERCENT_ID				6001
#define HUD_LINE_BAR_ID					6102
#define HUD_TEXT_TARGET_NAME_ID			6103
#define HUD_TEXT_TARGET_PROP_ID			6104
#define HUD_TEXT_TRACKER_NAME_ID		7000
#define HUD_TEXT_ANN_KILLER_NAME_ID		7100
#define HUD_TEXT_ANN_TAUNT_ID			7102
#define HUD_TEXT_ANN_KILLER_SCORE_ID	7101

bool tracked_broadcast[MAX_TRACKERS];
int tracked_counter[MAX_TRACKERS];
str tracked_name[MAX_TRACKERS];
int tracked_tids[MAX_TRACKERS];
int tracked_hps[MAX_TRACKERS];
int tracked_max_hps[MAX_TRACKERS];
int tracked_flags[MAX_TRACKERS];
int tracked_kills[MAX_TRACKERS];
bool tracked_tids_select[MAX_TRACKERS];
int announcers_playing = 0;
int announcer_priority = -1;
int announcer_id = 0;
bool firstblood = false;
//==============================================================================
function int to_fixed(int num)
{
	return (num << 16);
}

function int to_int(int num)
{
	if(num < 0)return (num / 65536);
	return (num >> 16);
}

function int abs(int x)
{
	if(x < 0)return -x;
	return x;
}

function bool ActorIsPlayer(int tid)
{
	return ((ClassifyActor(tid) & ACTOR_PLAYER) == ACTOR_PLAYER);
}

function bool ActorIsMonster(int tid)
{
	return ((ClassifyActor(tid) & ACTOR_MONSTER) == ACTOR_MONSTER);
}

function bool ActorIsAlive(int tid)
{
	return ((ClassifyActor(tid) & ACTOR_ALIVE) == ACTOR_ALIVE);
}

function bool ActorIsExists(int tid)
{
	return (ClassifyActor(tid) != ACTOR_NONE);
}

function bool IsGameTypeSinglePlayer(void)
{
	return (SinglePlayer() || (GameType() == GAME_SINGLE_PLAYER));
}

function bool IsGameTypeDeathmatch(void)
{
	return (GetCVAR("Deathmatch") || GetCVAR("Duel") || GetCVAR("TeamPlay") || (GameType() == GAME_NET_DEATHMATCH));
}

function int MaxPlayersInGame(void)
{
	if(MaxClientsCount > 0)return MaxClientsCount;
	if(!IsGameTypeSinglePlayer())
	{
		MaxClientsCount = abs(GetCVAR("sv_maxclients"));
		if(MaxClientsCount > MAX_CLIENT_COUNT)
		{
			MaxClientsCount = MAX_CLIENT_COUNT;
		}
		else if(MaxClientsCount <= 0)
		{
			MaxClientsCount = 8;//GZDoom or other "network" shit.
		}
	}
	else
	{
		MaxClientsCount = 1;
	}
	return MaxClientsCount;
}

function int percent(int current, int maximum, int maxpercent, bool overflow)
{
	if((current <= 0) || (maximum <= 0) || (maxpercent <= 0))return 0;
	if((INT_MAX/maxpercent) < current)return maxpercent;
	int percentage = (current*maxpercent)/maximum;
	if((overflow == false) && (percentage > maxpercent))return maxpercent;
	return percentage;
}

function bool get_bool_user_cvar(str cvar)
{
	return GetUserCVar(ConsolePlayerNumber(),cvar);
}

function void reset_selected(void)
{
	for(int i = 0; i < MAX_TRACKERS; i++)
	{
		tracked_tids_select[i] = false;
	}
}

function int hpbar_align_left(int x)
{
	if(x >= 0)
	{
		return to_fixed(x) + 0.1;
	}
	return to_fixed(x) - 0.1;
}

function int hpbar_align_right(int x)
{
	if(x >= 0)
	{
		return to_fixed(x) + 0.2;
	}
	return to_fixed(x) - 0.2;
}

function int HPBarSetTid(void)
{
	int tid = UniqueTID(0,0);
	Thing_ChangeTID(0,tid);
	return tid;
}

function int GetOrSetMonsterTrackNum(void)
{
	int TrackNum,i,j;
	for(i = 0; (i < MAX_TRACKERS) && (j < MAX_TRACKERS); i++)
	{
		if((tracked_tids[i] == 0) || (!(ActorIsExists(tracked_tids[i]) && CheckActorClass(tracked_tids[i],"hpbar-tracker"))))
		{
			TrackNum = UniqueTID(0,0);
			SpawnProjectile(0,"hpbar-tracker",0,0,0,0,TrackNum);
			if(ThingCount(T_NONE,TrackNum) == 1)//check for a matching tid.
			{
				tracked_tids[i] = TrackNum;
				return i;
			}
			else
			{
				j++;
				i--;
				continue;
			}
		}
	}
	//there was no room: replace for weakest monster
	j = -1;
	int lowestHP = INT_MAX;
	int lowestMaxHP = INT_MAX;
	int hp,max_hp;
	for(i = 0; i < MAX_TRACKERS; i++)
	{
		hp = tracked_hps[i];
		max_hp = tracked_max_hps[i];
		if((max_hp < lowestMaxHP) || ((max_hp == lowestMaxHP) && (hp < lowestHP)) || (tracked_flags[i] & FLAG_FRIENDLY))
		{
			j = i;
			lowestHP = hp;
			lowestMaxHP = max_hp;
		}
	}
	if(j >= 0)
	{
		TrackNum = UniqueTID(0,0);
		SpawnProjectile(0,"hpbar-tracker",0,0,0,0,TrackNum);
		if(ThingCount(T_NONE,TrackNum) == 1)//check for a matching tid.
		{
			tracked_tids[j] = TrackNum;
			return j;
		}
	}
	return -1;
}

function int GetLineTrackNum(int LineTrackNum, int PuffTID, bool drone)
{
	if((LineTrackNum > 0) && ActorIsExists(LineTrackNum) && CheckActorClass(LineTrackNum,"hpbarline-tracker") && IsPointerEqual(AAPTR_Tracer,AAPTR_Target,PuffTID,LineTrackNum))
	{
		SetActorProperty(LineTrackNum,APROP_ReactionTime,LINEBAR_TIC_ACTIVE);
		return LineTrackNum;
	}
	else
	{
		int TrackNum,TrackNum2;
		TrackNum = UniqueTID(0,0);
		SpawnProjectile(0,"hpbarline-tracker",0,0,0,0,TrackNum);
		if(ActorIsExists(TrackNum) && CheckActorClass(TrackNum,"hpbarline-tracker") && (ThingCount(T_NONE,TrackNum) == 1))//check for a matching tid.
		{
			if(SetActivator(TrackNum) == 1)
			{
				//Copy the player's pointer.
				if(drone)
				{
					if((SetActivator(PuffTID,AAPTR_Target) == 1) && (SetActivator(0,AAPTR_Master) == 1))
					{
						TrackNum2 = UniqueTID(0,0);
						SpawnProjectile(0,"hpbarline-tracker",0,0,0,0,TrackNum2);
						if(ActorIsExists(TrackNum2) && CheckActorClass(TrackNum2,"hpbarline-tracker"))
						{
							if(SetActivator(TrackNum) == 1)
							{
								SetPointer(AAPTR_Master,TrackNum2,AAPTR_Target,PTROP_UNSAFETARGET|PTROP_UNSAFEMASTER);
								SetActorProperty(TrackNum2,APROP_ReactionTime,0);
							}
						}
						else
						{
							SetActorProperty(TrackNum,APROP_ReactionTime,0);
							return 0;
						}
					}
					else
					{
						SetActorProperty(TrackNum,APROP_ReactionTime,0);
						return 0;
					}
				}
				else
				{
					SetPointer(AAPTR_Master,PuffTID,AAPTR_Target,PTROP_UNSAFETARGET|PTROP_UNSAFEMASTER);
				}
				//Return to the monster.
				if(SetActivator(TrackNum,AAPTR_Target) == 1)
				{
					SetActorProperty(TrackNum,APROP_ReactionTime,LINEBAR_TIC_ACTIVE);
					return TrackNum;
				}
			}
		}
	}
	return 0;
}

function str hpp_to_color(int p)
{
	if(p <= 25)return "\c[d4]";
	else if(p <= 50)return "\c[o4]";
	else if(p <= 75)return "\c[e9]";
	else if(p <= 100)return "\c[m4]";
	return "\c[x5]";
}

function void set_linespritename(int hp_percentage, int hp, int max_hp)
{
	if(hp_percentage > 100)
	{
		SetFont(StrParam(s:"FILL",i:percent(hp,max_hp,14,false)));
	}
	else
	{
		SetFont(StrParam(s:"FILL",i:hp_percentage/10));
	}
}

function void draw_line_hpbar(int hp_percentage, int i, int fadetime)
{
	SetHudClipRect(to_int(FULL_HPBAR_X+FULL_HPBAR_X_OFFSET-100.0),to_int(FULL_HPBAR_Y+FULL_HPBAR_Y_OFFSET-9.0),hp_percentage*2,18,200);
	HudMessageBold(s:"A"; HUDMSG_FADEOUT,HUD_LINE_PERCENT_ID+i,CR_UNTRANSLATED,FULL_HPBAR_X+FULL_HPBAR_X_OFFSET,FULL_HPBAR_Y+FULL_HPBAR_Y_OFFSET,FULL_HOLDTIME,fadetime);
	SetHudClipRect(0,0,0,0,0);
}

function void HPBarLineStateMsg(str statemsg, int ln)
{
	HudMessageBold(l:statemsg; HUDMSG_FADEOUT, HUD_TEXT_TARGET_PROP_ID + ln, CR_WHITE, FULL_HPBAR_X, FULL_INFO_Y + to_fixed(ln * 10), FULL_HOLDTIME, FULL_FADETIME);
}

function void show_full_hpbar(int hp, int max_hp, int hp_percentage, str name, int flags)
{
	SetFont("HPBAR");
	HudMessageBold(s:"A"; HUDMSG_FADEOUT,HUD_LINE_BAR_ID,CR_UNTRANSLATED,FULL_HPBAR_X,FULL_HPBAR_Y,FULL_HOLDTIME,FULL_FADETIME);
	SetFont(DEFAULT_FONT);
	HudMessageBold(d:hp,s:" / ",d:max_hp,s:" (",d:hp_percentage,s:"%)"; HUDMSG_FADEOUT,HUD_TEXT_PERCENT_ID,CR_WHITE,FULL_HPBAR_X,FULL_HPBAR_Y,FULL_HOLDTIME,FULL_FADETIME);
	HudMessageBold(s:name; HUDMSG_FADEOUT,HUD_TEXT_TARGET_NAME_ID,CR_WHITE,FULL_HPBAR_X,FULL_NAME_Y,FULL_HOLDTIME,FULL_FADETIME);
	int ln = 0;
	if(flags & FLAG_REFLECTIVE)
	{
		HPBarLineStateMsg("HPBAR_LINE_REFLECT",ln);
		ln++;
	}
	if((flags & FLAG_INVULNERABLE) && !(flags & FLAG_DEAD))
	{
		HPBarLineStateMsg("HPBAR_LINE_INVUL",ln);
		ln++;
	}
	if(flags & FLAG_FRIENDLY)
	{
		HPBarLineStateMsg("HPBAR_LINE_FRIEND",ln);
		ln++;
	}
	if(flags & FLAG_GHOST)
	{
		HPBarLineStateMsg("HPBAR_LINE_GHOST",ln);
		ln++;
	}
	if(flags & FLAG_INVISIBLE)
	{
		HPBarLineStateMsg("HPBAR_LINE_INVIS",ln);
		ln++;
	}
	if(flags & FLAG_STEALTH)
	{
		HPBarLineStateMsg("HPBAR_LINE_STEALTH",ln);
		ln++;
	}
}

function void show_minimal_hpbar(int hp_percentage)
{
	SetHudSize(MINIMAL_HUD_WIDTH, MINIMAL_HUD_HEIGHT, false);
	SetFont(DEFAULT_FONT);
	HudMessageBold(s:hpp_to_color(hp_percentage), d:hp_percentage, s:"%\c-";HUDMSG_FADEOUT, HUD_TEXT_PERCENT_ID, CR_UNTRANSLATED, MINIMAL_HP_X, MINIMAL_HP_Y, MINIMAL_HOLDTIME, MINIMAL_FADETIME);
}

function void announce(int priority, str sound, str bigtext, str smalltext, str tinytext)
{
	if(priority >= announcer_priority)
	{
		// Increment here so the it is seen within the same tic.
		announcers_playing += 1;
		announcer_priority = priority;
		SetCVarString("hpbar_announcer_sound",sound);
		SetCVarString("hpbar_announcer_bigtext",bigtext);
		SetCVarString("hpbar_announcer_smalltext",smalltext);
		SetCVarString("hpbar_announcer_tinytext",tinytext);
		announcer_id++;
		SetCVar("hpbar_announcer_id",announcer_id);
		ACS_NamedExecuteAlways("HPBar_Announcer",0,announcer_id);
		ACS_NamedExecuteAlways("HPBar_AnnouncerCooldown",0);
	}
}

function int get_max_hp(void)
{
	int max_hp = GetActorProperty(0,APROP_SpawnHealth);
	if(max_hp <= 0)
	{
		if(ActorIsPlayer(0))
		{
			max_hp = 100;
		}
		else
		{
			max_hp = 0;
		}
	}
	return max_hp;
}

function bool streq(str x, str y)
{
	return (StrICmp(x,y) == 0);
}

//Replaces control characters with text.
function str ccunescape_impl(str s, int n)
{
	if(streq(s,""))
	{
		return "";
	}
	else if(n >= strlen(s))
	{
		return "";
	}
	for(int i = n; i < (strlen(s)-1); i++)
	{
		if((GetChar(s,i) == '\\') && (GetChar(s,i+1) == 'c'))
		{
			return StrParam(s:strmid(s,n,i-n), s:"\c", s:ccunescape_impl(s,i+2));
		}
	}
	return strmid(s,n,strlen(s));
}

function str ccunescape(str s)
{
	return ccunescape_impl(s,0);
}

function str normalize_class_impl(str s, int n)
{
	if(streq(s,""))
	{
		return "";
	}
	else if(n >= strlen(s))
	{
		return "";
	}
	for(int i = n; i < strlen(s); i++)
	{
		if(GetChar(s,i) == '~')
		{
			return StrParam(s:strmid(s,n,i-n), s:normalize_class_impl(s,i+1));
		}
	}
	return strmid(s,n,strlen(s));
}

function str normalize_class(str s)
{
	str nclass = normalize_class_impl(s,0);
	str lname = StrParam(s:"hpbar_map_", s:nclass);
	str mclass =  StrParam(l:lname);
	if(!streq(mclass,lname))
	{
		return mclass;
	}
	return nclass;
}

function str get_actor_name(void)
{
	if(ActorIsPlayer(0))
	{
		return StrParam(n:0);
	}
	str class = GetActorClass(0);
	str classtag = GetActorProperty(0,APROP_NameTag);
	if(streq(class,classtag))
	{
		str lname = StrParam(s:"hpbar_name_", s:class);
		str name = StrParam(l:lname);
		if(!streq(name,lname))
		{
			return ccunescape(name);
		}
		lname = StrParam(s:"hpbar_name_", s:normalize_class(class));
		name = StrParam(l:lname);
		if(!streq(name,lname))
		{
			return ccunescape(name);
		}
	}
	return ccunescape(classtag);
}

function bool should_track(void)
{
	str class = GetActorClass(0);
	int boss = StrParam(l:StrParam(s:"hpbar_track_", s:class));
	if(streq(boss,"1"))
	{
		return true;
	}
	else if(streq(boss,"-1"))
	{
		return false;
	}
	boss = StrParam(l:StrParam(s:"hpbar_track_", s:normalize_class(class)));
	if(streq(boss,"1"))
	{
		return true;
	}
	else if(streq(boss,"-1"))
	{
		return false;
	}
	if(CheckFlag(0,"BOSS"))
	{
		return true;
	}
	return (get_max_hp() >= GetCVar("hpbar_tracker_threshold"));
}

function bool get_actor_invul(void)
{
	return (CheckFlag(0,"INVULNERABLE") || (!CheckFlag(0,"SHOOTABLE")) || CheckFlag(0,"NODAMAGE") || CheckFlag(0,"DORMANT"));
}

function bool get_actor_invis(void)
{
	return (CheckFlag(0,"INVISIBLE") || ((GetActorProperty(0,APROP_Alpha) < 0.33) && (GetActorProperty(0,APROP_RenderStyle) != STYLE_Normal)));
}

function void request_broadcast_tracker_info(void)
{
	for(int i = 0; i < MAX_TRACKERS; i++)
	{
		if(tracked_tids[i] > 0)
		{
			tracked_broadcast[i] = true;
		}
	}
}

function int get_flags(void)
{
	return ((get_actor_invis() * FLAG_INVISIBLE) + (get_actor_invul() * FLAG_INVULNERABLE) + (CheckFlag(0,"REFLECTIVE") * FLAG_REFLECTIVE) + (CheckFlag(0,"FRIENDLY") * FLAG_FRIENDLY) + (CheckFlag(0,"GHOST") * FLAG_GHOST) + (CheckFlag(0,"STEALTH") * FLAG_STEALTH) + ((GetActorProperty(0,APROP_Health) <= 0) * FLAG_DEAD));
}

function str HPBarGetActorInfo(int i)
{
	tracked_counter[i]++;
	if(tracked_broadcast[i] || (tracked_counter[i] > 7))//starting every seventh call.
	{
		tracked_counter[i] = 0;
		tracked_hps[i] = GetActorProperty(0,APROP_Health);
		tracked_max_hps[i] = get_max_hp();
		tracked_kills[i] = CheckInventory("MonsterScore");
		tracked_flags[i] = get_flags();
		tracked_name[i] = get_actor_name();
	}
	return tracked_name[i];
}

function void HPBarResetActorInfo(int i)
{
	tracked_hps[i] = 0;
	tracked_max_hps[i] = 0;
	tracked_kills[i] = 0;
	tracked_flags[i] = 0;
	tracked_counter[i] = 0;
	SetCVarString(StrParam(s:"hpbar_tracked_names", d:i),"");
}

function void clear_tracklist(void)
{
	for(int i = 0; i < MAX_TRACKERS; i++)
	{
		HPBarResetActorInfo(i);
	}
}
//==============================================================================
script "Copy_tracked_tid_and_MaxHP_to_Clientside" (int i, int tid, int max_hps) CLIENTSIDE
{
	tracked_tids[i] = tid;
	tracked_max_hps[i] = max_hps;
}

script "Copy_HP_and_Kills_to_Clientside" (int i, int hp, int kills) CLIENTSIDE
{
	tracked_hps[i] = hp;
	tracked_kills[i] = kills;
}

script "Copy_Invul_Reflect_Friendly_to_Clientside" (int i, int tracked_flags_) CLIENTSIDE
{
	tracked_flags[i] = tracked_flags_;
}
//==============================================================================
script "HPBar_Open" OPEN
{
	clear_tracklist();//Clearing lists on the server.
	int MaxPlayers = MaxPlayersInGame();
	int OldPlayers,Players,i;
	while(1)
	{
		OldPlayers = Players;
		Players = 0;
		for(i = 0; i < MaxPlayers; i++)
		{
			if((PlayerInGame(i) || (PlayerIsSpectator(i) == 1)) && !PlayerIsBot(i))
			{
				Players++;
			}
		}
		if(OldPlayers != Players)
		{
			request_broadcast_tracker_info();
		}
		Delay(35);
	}
}

script "HPBar_ReOpen" REOPEN
{
	int MaxPlayers = MaxPlayersInGame();
	int OldPlayers,Players,i;
	while(1)
	{
		OldPlayers = Players;
		Players = 0;
		for(i = 0; i < MaxPlayers; i++)
		{
			if((PlayerInGame(i) || (PlayerIsSpectator(i) == 1)) && !PlayerIsBot(i))
			{
				Players++;
			}
		}
		if(OldPlayers != Players)
		{
			request_broadcast_tracker_info();
		}
		Delay(35);
	}
}

//Launching the tracker on the client.
script "HPBar_Open-cs" OPEN CLIENTSIDE
{
	delay(35+(ConsolePlayerNumber()/4));
	int x,y,rank,hp_limit,maxhp_limit,i,tid,max_hp,hp,n,hpp,kills,TRACKER_HUD_WIDTH,TRACKER_HUD_HEIGHT,tracker_scale,hpbar_tracker_x_,hpbar_tracker_y_;
	bool friendly_show;
	str name,statemsg,killsmsg;
	bool hpbar_tracker_srv = GetCVar("hpbar_tracker_srv");
	bool hpbar_tracker_ = GetUserCVar(ConsolePlayerNumber(),"hpbar_tracker");
	tracker_scale = GetUserCVar(ConsolePlayerNumber(),"hpbar_tracker_scale");
	hpbar_tracker_x_ = GetUserCVar(ConsolePlayerNumber(),"hpbar_tracker_x");
	hpbar_tracker_y_ = GetUserCVar(ConsolePlayerNumber(),"hpbar_tracker_y");
	Switch(tracker_scale)
	{
		case 0:
			TRACKER_HUD_WIDTH = 800;
			TRACKER_HUD_HEIGHT = 600;
			break;
		case 1:
			TRACKER_HUD_WIDTH = 960;
			TRACKER_HUD_HEIGHT = 720;
			break;
		case 2:
			TRACKER_HUD_WIDTH = 1024;
			TRACKER_HUD_HEIGHT = 768;
			break;
		case 3:
			TRACKER_HUD_WIDTH = 1280;
			TRACKER_HUD_HEIGHT = 960;
			break;
	}
	SetHudSize(TRACKER_HUD_WIDTH, TRACKER_HUD_HEIGHT, true);
	SetFont(DEFAULT_FONT);
	while(true)
	{
		delay(3);
		if(hpbar_tracker_ && hpbar_tracker_srv)
		{
			x = GetUserCVar(ConsolePlayerNumber(),"hpbar_tracker_x_offset") + to_int((hpbar_tracker_x_ - 0.5) * GetScreenWidth() / GetScreenHeight() * TRACKER_HUD_HEIGHT) + (TRACKER_HUD_WIDTH / 2);
			y = to_fixed(GetUserCVar(ConsolePlayerNumber(),"hpbar_tracker_y_offset")) + to_fixed(to_int((hpbar_tracker_y_ - 0.5) * GetScreenHeight()) + (TRACKER_HUD_HEIGHT / 2));
			friendly_show = get_bool_user_cvar("hpbar_show_friendly");
			reset_selected();
			for(rank = 0; rank < NUM_RANKINGS; rank++)
			{
				n = -1;
				hp_limit = 0;
				maxhp_limit = 0;
				for(i = 0; i < MAX_TRACKERS; i++)
				{
					tid = tracked_tids[i];
					if((tid > 0) && (!tracked_tids_select[i]))
					{
						hp = tracked_hps[i];
						max_hp = tracked_max_hps[i];
						if(((max_hp > maxhp_limit) || ((max_hp == maxhp_limit) && (hp > hp_limit))) && (friendly_show || ((tracked_flags[i] & FLAG_FRIENDLY) == 0)))
						{
							n = i;
							maxhp_limit = max_hp;
							hp_limit = hp;
						}
					}
				}
				if(n >= 0)
				{
					tracked_tids_select[n] = true;
					name = GetCVarString(StrParam(s:"hpbar_tracked_names", d:n));
					if(!streq(name,""))
					{
						hp = tracked_hps[n];
						max_hp = tracked_max_hps[n];
						hpp = percent(hp,max_hp,100,true);
						statemsg = " ";
						if(tracked_flags[n] & FLAG_REFLECTIVE)statemsg = StrParam(s:statemsg, l:"HPBAR_TRACKER_REFLECT");
						if((tracked_flags[n] & FLAG_INVULNERABLE) && !(tracked_flags[n] & FLAG_DEAD))statemsg = StrParam(s:statemsg, l:"HPBAR_TRACKER_INVUL");
						if(tracked_flags[n] & FLAG_FRIENDLY)statemsg = StrParam(s:statemsg, l:"HPBAR_TRACKER_FRIEND");
						if(tracked_flags[n] & FLAG_GHOST)statemsg = StrParam(s:statemsg, l:"HPBAR_TRACKER_GHOST");
						if(tracked_flags[n] & FLAG_INVISIBLE)statemsg = StrParam(s:statemsg, l:"HPBAR_TRACKER_INVIS");
						if(tracked_flags[n] & FLAG_STEALTH)statemsg = StrParam(s:statemsg, l:"HPBAR_TRACKER_STEALTH");
						killsmsg = "";
						if(GetCVar("hpbar_rekt"))
						{
							kills = tracked_kills[n];
							if(kills >= 10)
							{
								killsmsg = StrParam(l:"HPBAR_TRACKER_10REKT_S", d:kills, l:"HPBAR_TRACKER_10REKT_E");
							}
							else if(kills >= 5)
							{
								killsmsg = StrParam(l:"HPBAR_TRACKER_5REKT_S", d:kills, l:"HPBAR_TRACKER_5REKT_E");
							}
							else if(kills >= 2)
							{
								killsmsg = StrParam(l:"HPBAR_TRACKER_2REKT_S", d:kills, l:"HPBAR_TRACKER_2REKT_E");
							}
							else if(kills >= 1)
							{
								killsmsg = StrParam(l:"HPBAR_TRACKER_1REKT_S", d:kills, l:"HPBAR_TRACKER_1REKT_E");
							}
						}
						HudMessage(s:hpp_to_color(hpp), d:hp, s:"/", d:max_hp, s:"\c-";HUDMSG_FADEOUT, HUD_TEXT_TRACKER_NAME_ID + rank, CR_WHITE, hpbar_align_right(x + 80), y + (rank * 12.0), TRACKER_HOLDTIME, TRACKER_FADETIME);
						HudMessage(s:hpp_to_color(hpp), d:hpp, s:"%\c-";HUDMSG_FADEOUT, HUD_TEXT_TRACKER_NAME_ID + NUM_RANKINGS + rank, CR_WHITE, hpbar_align_right(x + 120), y + (rank * 12.0), TRACKER_HOLDTIME, TRACKER_FADETIME);
						HudMessage(s:name, s:killsmsg, s:statemsg;HUDMSG_FADEOUT, HUD_TEXT_TRACKER_NAME_ID + NUM_RANKINGS * 2 + rank, CR_WHITE, hpbar_align_left(x + 132), y + (rank * 12.0), TRACKER_HOLDTIME, TRACKER_FADETIME);
					}
					else
					{
						tracked_tids[n] = 0;
						break;
					}
				}
				else
				{
					break;
				}
			}
		}
		else
		{
			delay(35);
			hpbar_tracker_srv = GetCVar("hpbar_tracker_srv");
			hpbar_tracker_ = GetUserCVar(ConsolePlayerNumber(),"hpbar_tracker");
		}
	}
}

script "HPBar_Enter" ENTER
{
	delay(1);
	ACS_NamedExecuteAlways("HPBar_HitTarget",0);
}

script "HPBar_Respawn" RESPAWN
{
	delay(1);
	ACS_NamedExecuteAlways("HPBar_HitTarget",0);
}

script "HPBar_HitTarget" (void)
{
	int p_num = PlayerNumber();
	if(GetCVar("hpbar_rekt"))
	{
		SetThingSpecial(0,ACS_NamedExecuteAlways,"HPBar_Rect",0,p_num);
	}
	while(PlayerInGame(p_num) && ActorIsAlive(0))
	{
		while(PlayerInGame(p_num) && ActorIsAlive(0) && ((CheckPlayerCamera(p_num) == -1) || (CheckPlayerCamera(p_num) == ActivatorTID())))
		{
			LineAttack(0,GetActorAngle(0),GetActorPitch(0),0,"hpbar-testing-puff","None",8192.0,FHF_NORANDOMPUFFZ|FHF_NOIMPACTDECAL,0);
			delay(1);
			LineAttack(0,GetActorAngle(0),GetActorPitch(0),0,"hpbar-testing-thru-puff","None",8192.0,FHF_NORANDOMPUFFZ|FHF_NOIMPACTDECAL,0);
			delay(1);
		}
		while(PlayerInGame(p_num) && ActorIsAlive(0) && !((CheckPlayerCamera(p_num) == -1) || (CheckPlayerCamera(p_num) == ActivatorTID())))
		{
			delay(2);
		}
		delay(1);
	}
}

script "HPBar_GetTarget" (void)
{
	int PuffTID = HPBarSetTid();
	int LineTrackNum;
	bool drone = false;
	if(SetActivator(0,AAPTR_TARGET) == 1)
	{
		int p_num = PlayerNumber();
		LineTrackNum = CheckInventory("MonsterAlreadyTrackedLine");
		if((p_num < 0) && (SetActivator(0,AAPTR_MASTER) == 1))
		{
			drone = true;
			p_num = PlayerNumber();
			LineTrackNum = CheckInventory("MonsterAlreadyTrackedLine");
		}
		if((p_num >= 0) && (SetActivator(PuffTID,AAPTR_TRACER) == 1) && ActorIsAlive(0))
		{
			int max_hp = get_max_hp();
			if(max_hp > 0)
			{
				if(GetCVar("hpbar_tracker_srv") && (CheckInventory("hpbar-tracker-cooldown") < 1))
				{
					GiveInventory("hpbar-tracker-cooldown",1);
					ACS_NamedExecuteAlways("HPBar_TrackerView",0,0);
				}
				if(max_hp >= GetCVar("hpbar_threshold"))
				{
					int NewLineTrackNum = GetLineTrackNum(LineTrackNum,PuffTID,drone);
					if((NewLineTrackNum > 0) && (NewLineTrackNum != LineTrackNum))//launching a new line tracker.
					{
						//To the player.
						if(SetActivator(NewLineTrackNum,AAPTR_Master) == 1)
						{
							TakeInventory("MonsterAlreadyTrackedLine",INT_MAX);
							GiveInventory("MonsterAlreadyTrackedLine",NewLineTrackNum);
							LineTrackNum = CheckInventory("MonsterAlreadyTrackedLine");
							int flags,hp;
							while(PlayerInGame(p_num) && (NewLineTrackNum == LineTrackNum))
							{
								//To the monster.
								if(SetActivator(NewLineTrackNum,AAPTR_Target) == 1)
								{
									flags = get_flags();
									hp = GetActorProperty(0,APROP_Health) * !((flags & FLAG_DEAD) == FLAG_DEAD);
									ACS_NamedExecuteWithResult("HPBar_LinebarView", p_num, hp, max_hp, flags);
								}
								else
								{
									break;
								}
								delay(3);
								//To the player.
								if(SetActivator(NewLineTrackNum,AAPTR_Master) == 1)
								{
									LineTrackNum = CheckInventory("MonsterAlreadyTrackedLine");
								}
								else
								{
									break;
								}
							}
							if(ActorIsExists(NewLineTrackNum) && CheckActorClass(NewLineTrackNum,"hpbarline-tracker"))
							{
								SetActorProperty(NewLineTrackNum,APROP_ReactionTime,0);
							}
						}
					}
				}
			}
		}
	}
}

//The script is executed on behalf of the target (monster).
script "HPBar_LinebarView" (int p_num, int hp, int max_hp, int flags) CLIENTSIDE
{
	if(ConsolePlayerNumber() == p_num)
	{
		if(((flags & FLAG_FRIENDLY) == 0) || get_bool_user_cvar("hpbar_show_friendly"))
		{
			int hp_percentage = percent(hp,max_hp,100,true);
			int style = GetUserCVar(p_num,"hpbar_style");
			if(style == STYLE_FULL)
			{
				SetHudSize(FULL_HUD_WIDTH, FULL_HUD_HEIGHT, true);
				show_full_hpbar(hp, max_hp, hp_percentage, get_actor_name(), flags);
				set_linespritename(hp_percentage,hp,max_hp);
				draw_line_hpbar(hp_percentage, 0, FULL_FADETIME);
				delay(3);
				draw_line_hpbar(hp_percentage, 1, FULL_FADETIME_SECOND);
			}
			else if(style == STYLE_MINIMAL)
			{
				show_minimal_hpbar(hp_percentage);
			}
		}
	}
}

//Tracking a monster caught in the sight, the check cycle works while it is alive.
script "HPBar_TrackerView" (int force_track)
{
	int tracked_tid = CheckInventory("MonsterAlreadyTracked");
	if((ActorIsMonster(0) || (ActorIsPlayer(0) && IsGameTypeDeathmatch())) && ((tracked_tid < 1) || !(ActorIsExists(tracked_tid) && CheckActorClass(tracked_tid,"hpbar-tracker"))))
	{
		// Should we track it?
		if((force_track == 1) || should_track())
		{
			TakeInventory("MonsterAlreadyTracked",INT_MAX);
			//Find an empty slot, get a track number, create a tracker actor.
			int i = GetOrSetMonsterTrackNum();
			if(i >= 0)//If there is no place in the list, stop the script.
			{
				GiveInventory("MonsterAlreadyTracked",tracked_tids[i]);
				tracked_tid = tracked_tids[i];
				tracked_broadcast[i] = true;
				str name = HPBarGetActorInfo(i);
				str name_cvar = StrParam(s:"hpbar_tracked_names", d:i);
				int old_hp,old_kills,old_flags;
				while(ActorIsExists(tracked_tid) && CheckActorClass(tracked_tid,"hpbar-tracker"))
				{
					if(SetActivator(tracked_tid) == 1)//switching to the tracker.
					{
						SetUserVariable(0,"user_tracked_num",i+1);
						SetActorProperty(0,APROP_ReactionTime,35);
						if(tracked_broadcast[i])
						{
							// Send monster Max HP
							ACS_NamedExecuteWithResult("Copy_tracked_tid_and_MaxHP_to_Clientside",i,tracked_tids[i],tracked_max_hps[i]);
						}
						if(tracked_broadcast[i] || (old_hp != tracked_hps[i]) || (old_kills != tracked_kills[i]))
						{
							// Send monster HP
							ACS_NamedExecuteWithResult("Copy_HP_and_Kills_to_Clientside",i,tracked_hps[i],tracked_kills[i]);
						}
						if(tracked_broadcast[i] || (old_flags != tracked_flags[i]))
						{
							// Send monster invul, reflect, friendly
							ACS_NamedExecuteWithResult("Copy_Invul_Reflect_Friendly_to_Clientside",i,tracked_flags[i]);
						}
						if(tracked_broadcast[i] || (!streq(GetCVarString(name_cvar),name)))
						{
							tracked_broadcast[i] = false;
							SetCVarString(name_cvar,name);
						}
						old_hp = tracked_hps[i];
						old_kills = tracked_kills[i];
						old_flags = tracked_flags[i];
						delay(1);
						if(SetActivator(0,AAPTR_TARGET) == 1)//switch to the monster.
						{
							if(ActorIsAlive(0) && (tracked_tid == tracked_tids[i]) && (tracked_tid == CheckInventory("MonsterAlreadyTracked")))
							{
								name = HPBarGetActorInfo(i);
							}
							else
							{
								break;
							}
						}
						else
						{
							break;
						}
					}
					else
					{
						break;
					}
				}
				// The monster is dead, remove it from the slot and tell clients to stop tracking it.
				if(tracked_tid == tracked_tids[i])
				{
					HPBarResetActorInfo(i);
					ACS_NamedExecuteWithResult("Copy_tracked_tid_and_MaxHP_to_Clientside",i,0,0);
				}
				if((SetActivator(tracked_tid,AAPTR_TARGET) == 1) && CheckActorClass(tracked_tid,"hpbar-tracker"))
				{
					SetUserVariable(tracked_tid,"user_tracked_num",0);
					TakeInventory("MonsterAlreadyTracked",INT_MAX);
				}
				else
				{
					TakeInventory("MonsterAlreadyTracked",INT_MAX);
				}
			}
		}
	}
}

script "HPBar_TargetDeath" (void) //A crutch for the network shit code.
{
	//The monster is dead, remove it from the slot and tell clients to stop tracking it.
	int i = GetUserVariable(0,"user_tracked_num");
	if(i > 0)
	{
		i--;
		HPBarResetActorInfo(i);
		ACS_NamedExecuteWithResult("Copy_tracked_tid_and_MaxHP_to_Clientside",i,0,0);
		Thing_ChangeTID(0,0);
		if(SetActivator(0,AAPTR_TARGET) == 1)
		{
			TakeInventory("MonsterAlreadyTracked",INT_MAX);
		}
	}
	else
	{
		Thing_ChangeTID(0,0);
	}
}

//The script is executed on behalf of the monster that killed the player or on behalf of the player himself in case of suicide.
script "HPBar_Rect" (int p_num)
{
	if(GetCVar("hpbar_tracker_srv"))
	{
		ACS_NamedExecuteAlways("HPBar_TrackerView",0,1);
	}
	GiveInventory("MonsterScore",1); //Total score
	GiveInventory("MonsterScoreTemporary",1); //Temporary score
	int score = CheckInventory("MonsterScore");
	int score_temp = CheckInventory("MonsterScoreTemporary");
	ACS_NamedExecuteAlways("HPBar_ShowScore",0,score,score_temp);
	if(!firstblood)
	{
		if((PlayerNumber() == p_num) || ((ClassifyActor(0) & ACTOR_WORLD) == ACTOR_WORLD))
		{
			int gender = GetPlayerInfo(p_num,PLAYERINFO_GENDER);
			str killstr = "";
			if(gender == 0)
			{
				killstr = "HPBAR_ANNOUNCE_GENDER_0";
			}
			else if(gender == 1)
			{
				killstr = "HPBAR_ANNOUNCE_GENDER_1";
			}
			else
			{
				killstr = "HPBAR_ANNOUNCE_GENDER_OTHER";
			}
			announce(1,"hpbar/firstblood",StrParam(l:"HPBAR_ANNOUNCE_SUICIDE"),StrParam(n:p_num+1),StrParam(l:killstr));
		}
		else
		{
			announce(1,"hpbar/firstblood",StrParam(l:"HPBAR_ANNOUNCE_VICTIM"),get_actor_name(),StrParam(l:"HPBAR_ANNOUNCE_VICTIM_E"));
		}
		firstblood = true;
	}
	// Wait for 5 seconds. If the monster didn't score other kills in the mean time, reset its temporary score.
	delay(35 * 5);
	if(CheckInventory("MonsterScoreTemporary") == score_temp)
	{
		TakeInventory("MonsterScoreTemporary", score_temp);
	}
}

script "HPBar_ShowScore" (int score, int score_temp)
{
	if(ActorIsMonster(0) && (get_max_hp() > 0))
	{
		str name = get_actor_name();
		Switch(score_temp)
		{
			case 2:
				announce(100+score_temp,"hpbar/doublekill",StrParam(l:"HPBAR_SCORE_2KILL"),name,StrParam(l:"HPBAR_SCORE_2KILL_E"));
				break;
			case 3:
				announce(100+score_temp,"hpbar/multikill",StrParam(l:"HPBAR_SCORE_3KILL"),name,StrParam(l:"HPBAR_SCORE_3KILL_E"));
				break;
			case 4:
				announce(100+score_temp,"hpbar/megakill",StrParam(l:"HPBAR_SCORE_4KILL"),name,StrParam(l:"HPBAR_SCORE_4KILL_E"));
				break;
			case 5:
				announce(100+score_temp,"hpbar/ultrakill",StrParam(l:"HPBAR_SCORE_5KILL"),name,StrParam(l:"HPBAR_SCORE_5KILL_E"));
				break;
			case 6:
				announce(100+score_temp,"hpbar/monsterkill",StrParam(l:"HPBAR_SCORE_6KILL"),name,StrParam(l:"HPBAR_SCORE_6KILL_E"));
				break;
			case 7:
				announce(100+score_temp,"hpbar/ludicrouskill",StrParam(l:"HPBAR_SCORE_7KILL"),name,StrParam(l:"HPBAR_SCORE_7KILL_E"));
				break;
			case 8:
				announce(100+score_temp,"hpbar/holyshit",StrParam(l:"HPBAR_SCORE_8KILL"),name,StrParam(l:"HPBAR_SCORE_8KILL_E"));
				break;
			case 9:
				announce(100+score_temp,"hpbar/holyshit",StrParam(l:"HPBAR_SCORE_9KILL"),name,StrParam(l:"HPBAR_SCORE_9KILL_E"));
				break;
		}
		if(score_temp >= 10)
		{
			announce(100+score_temp,"hpbar/sexyholyshit",StrParam(l:"HPBAR_SCORE_10KILL"),name,StrParam(d:score_temp,l:"HPBAR_SCORE_10KILL_E"));
		}
		//Wait until nothing is playing.
		while(announcers_playing > 0)delay(1);
		//Skip the announcement if the monster has gained another tier during the wait.
		if((score == 3) && (CheckInventory("MonsterScore") < 5))
		{
			announce(2,"hpbar/killingspree",StrParam(l:"HPBAR_SCORE_LEVEL1"),name,StrParam(l:"HPBAR_SCORE_LEVEL1_E"));
		}
		else if((score == 5) && (CheckInventory("MonsterScore") < 8))
		{
			announce(3,"hpbar/rampage",StrParam(l:"HPBAR_SCORE_LEVEL2"),name,StrParam(l:"HPBAR_SCORE_LEVEL2_E"));
		}
		else if((score == 8) && (CheckInventory("MonsterScore") < 10))
		{
			announce(4,"hpbar/dominating",StrParam(l:"HPBAR_SCORE_LEVEL3"),name,StrParam(l:"HPBAR_SCORE_LEVEL3_E"));
		}
		else if((score == 10) && (CheckInventory("MonsterScore") < 15))
		{
			announce(5,"hpbar/unstoppable",StrParam(l:"HPBAR_SCORE_LEVEL4"),name,StrParam(l:"HPBAR_SCORE_LEVEL4_E"));
		}
		else if((score == 15) && (CheckInventory("MonsterScore") < 25))
		{
			announce(6,"hpbar/godlike",StrParam(l:"HPBAR_SCORE_LEVEL5"),name,StrParam(l:"HPBAR_SCORE_LEVEL5_E"));
		}
		else if(score == 25)
		{
			announce(7,"hpbar/wickedsick",StrParam(l:"HPBAR_SCORE_LEVEL6"),name,StrParam(l:"HPBAR_SCORE_LEVEL6_E"));
		}
	}
}

script "HPBar_Announcer" (int announcer_id_) CLIENTSIDE
{
	if(get_bool_user_cvar("hpbar_announcer"))
	{
		if(GetCVar("hpbar_announcer_id") == announcer_id_)
		{
			str sound = GetCVarString("hpbar_announcer_sound");
			str bigtext = GetCVarString("hpbar_announcer_bigtext");
			str smalltext = GetCVarString("hpbar_announcer_smalltext");
			str tinytext = GetCVarString("hpbar_announcer_tinytext");
			StopSound(0,5);
			StopSound(0,6);
			StopSound(0,7);
			PlaySound(0,sound,5|CHAN_NOPAUSE,1.0,false,ATTN_NONE);
			PlaySound(0,sound,6|CHAN_NOPAUSE,1.0,false,ATTN_NONE);
			PlaySound(0,sound,7|CHAN_NOPAUSE,1.0,false,ATTN_NONE);
			SetHudSize(800,600,true);
			SetFont(DEFAULT_FONT);
			HudMessageBold(s:smalltext; HUDMSG_FADEOUT, HUD_TEXT_ANN_KILLER_NAME_ID, CR_WHITE, 400.0, 125.2, ANNOUNCER_HOLDTIME, ANNOUNCER_FADETIME);
			HudMessageBold(s:tinytext; HUDMSG_FADEOUT, HUD_TEXT_ANN_TAUNT_ID, CR_WHITE, 400.0, 150.1, ANNOUNCER_HOLDTIME, ANNOUNCER_FADETIME);
			SetHudSize(640,480,true);
			SetFont("BIGFONT");
			HudMessageBold(s:bigtext; HUDMSG_FADEOUT, HUD_TEXT_ANN_KILLER_SCORE_ID, CR_UNTRANSLATED, 320.0, 104.1, ANNOUNCER_HOLDTIME, ANNOUNCER_FADETIME);
			Log(s:smalltext, s:": ", s:bigtext);
		}
	}
}

script "HPBar_AnnouncerCooldown" (void)
{
	delay(35 * 3);
	announcers_playing -= 1;
	if(announcers_playing <= 0)
	{
		announcer_priority = -1;
	}
}
