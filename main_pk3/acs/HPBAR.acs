#library "HPBAR"
#include "zcommon.acs"

//The maximum number of players connected to the server.
#define MAX_CLIENT_COUNT 	64
int MaxClientsCount = 0;

#define INT_MAX							2147483647
#define STYLE_FULL						1
#define STYLE_MINIMAL					2

#define ANNOUNCER_HOLDTIME				5.0
#define ANNOUNCER_FADETIME				0.5

#define FULL_HUD_WIDTH					800
#define FULL_HUD_HEIGHT					600
#define FULL_HOLDTIME					0.25
#define FULL_FADETIME					0.1
#define FULL_HPBAR_X					400.0
#define FULL_HPBAR_Y					40.0
#define FULL_NAME_Y						(FULL_HPBAR_Y + 25.0)
#define FULL_INFO_Y						(FULL_NAME_Y + 12.0)

#define MINIMAL_HUD_WIDTH				1280
#define MINIMAL_HUD_HEIGHT				960
#define MINIMAL_HOLDTIME				0.03
#define MINIMAL_FADETIME				0.1
#define MINIMAL_HP_X					640.0
#define MINIMAL_HP_Y					500.0

#define TRACKER_HUD_WIDTH				1024
#define TRACKER_HUD_HEIGHT				768

#define MAX_TRACKERS					33
#define NUM_RANKINGS					10

#define INVALID_TID						0

//Шрифт по умолчанию
#define DEFAULT_FONT					"SMALLFONT"
//Text ID
#define HUD_TEXT_PERCENT_ID				6000
#define HUD_LINE_PERCENT_ID				6001
#define HUD_LINE_BAR_ID					6102
#define HUD_TEXT_TARGET_NAME_ID			6103
#define HUD_TEXT_TARGET_PROP_ID			6104
#define HUD_TEXT_TRACKER_NAME_ID		7000
#define HUD_TEXT_ANN_KILLER_NAME_ID		7100
#define HUD_TEXT_ANN_TAUNT_ID			7102
#define HUD_TEXT_ANN_KILLER_SCORE_ID	7101

int tracked_tids[MAX_TRACKERS];
int tracked_hps[MAX_TRACKERS];
int tracked_max_hps[MAX_TRACKERS];
bool tracked_friendly[MAX_TRACKERS];
bool tracked_invul[MAX_TRACKERS];
bool tracked_reflect[MAX_TRACKERS];
bool tracked_broadcast[MAX_TRACKERS];
int tracked_kills[MAX_TRACKERS];
int maxhp_rankings[NUM_RANKINGS];
int announcers_playing = 0;
int announcer_priority = -1;
int announcer_id = 0;
bool firstblood = false;
//==============================================================================
function int to_fixed(int x)
{
	return (x << 16);
}

function int to_int(int num)
{
	if(num < 0)return (num / 65536);
	return (num >> 16);
}

function int abs(int x)
{
	if(x < 0)return -x;
	return x;
}

function bool ActorIsPlayer(int tid)
{
	return ((ClassifyActor(tid) & ACTOR_PLAYER) == ACTOR_PLAYER);
}

function bool ActorIsMonster(int tid)
{
	return ((ClassifyActor(tid) & ACTOR_MONSTER) == ACTOR_MONSTER);
}

function bool ActorIsAlive(int tid)
{
	return ((ClassifyActor(tid) & ACTOR_ALIVE) == ACTOR_ALIVE);
}

function bool ActorIsExists(int tid)
{
	return (ClassifyActor(tid) != ACTOR_NONE);
}

function bool IsGameTypeSinglePlayer(void)
{
	return (SinglePlayer() || (GameType() == GAME_SINGLE_PLAYER));
}

function int MaxPlayersInGame(void)
{
	if(MaxClientsCount > 0)return MaxClientsCount;
	if(!IsGameTypeSinglePlayer())
	{
		MaxClientsCount = abs(GetCVAR("sv_maxclients"));
		if(MaxClientsCount > MAX_CLIENT_COUNT)
		{
			MaxClientsCount = MAX_CLIENT_COUNT;
		}
		else if(MaxClientsCount <= 0)
		{
			MaxClientsCount = 8;//GZDoom или прочее "сетевое" говно.
		}
	}
	else
	{
		MaxClientsCount = 1;
	}
	return MaxClientsCount;
}

function int percent(int current, int maximum, int maxpercent, bool overflow)
{
	if((current <= 0) || (maximum <= 0) || (maxpercent <= 0))return 0;
	if((INT_MAX/maxpercent) < current)return maxpercent;
	int percentage = (current*maxpercent)/maximum;
	if((overflow == false) && (percentage > maxpercent))return maxpercent;
	return percentage;
}

function bool get_bool_user_cvar(str cvar)
{
	return GetUserCVar(ConsolePlayerNumber(),cvar);
}

function bool already_selected(int x, int n)
{
	for(int i = 0; i < n; i++)
	{
		if(x == maxhp_rankings[i])
		{
			return true;
		}
	}
	return false;
}

function int hpbar_align_left(int x)
{
	if(x >= 0)
	{
		return to_fixed(x) + 0.1;
	}
	return to_fixed(x) - 0.1;
}

function int hpbar_align_right(int x)
{
	if(x >= 0)
	{
		return to_fixed(x) + 0.2;
	}
	return to_fixed(x) - 0.2;
}

function int HPBarSetTid(void)
{
	int tid = UniqueTID(0,0);
	Thing_ChangeTID(0,tid);
	return tid;
}

function str HPBarGetActorInfo(int i)
{
	tracked_hps[i] = GetActorProperty(0,APROP_Health);
	tracked_max_hps[i] = GetActorProperty(0,APROP_SpawnHealth);
	tracked_kills[i] = CheckInventory("MonsterScore");
	tracked_invul[i] = get_actor_invul();
	tracked_reflect[i] = CheckFlag(0,"REFLECTIVE");
	tracked_friendly[i] = CheckFlag(0,"FRIENDLY");
	return get_actor_name();
}

function void HPBarResetActorInfo(int i)
{
	tracked_hps[i] = INVALID_TID;
	tracked_max_hps[i] = 0;
	tracked_kills[i] = 0;
	tracked_invul[i] = false;
	tracked_reflect[i] = false;
	tracked_friendly[i] = false;
	SetCVarString(strparam(s:"hpbar_tracked_names", d:i),"");
}

function void clear_tracklist(void)
{
	for(int i = 0; i < MAX_TRACKERS; i++)
	{
		HPBarResetActorInfo(i);
	}
}

function int GetOrSetMonsterTrackNum(void)
{
	int TrackNum,i,j;
	for(i = 1; (i < MAX_TRACKERS) && (j < MAX_TRACKERS); i++)
	{
		if((tracked_tids[i] == INVALID_TID) || (!ActorIsExists(tracked_tids[i])) || (!CheckActorClass(tracked_tids[i],"hpbar-tracker")))
		{
			TrackNum = UniqueTID(0,0);
			SpawnProjectile(0,"hpbar-tracker",GetActorAngle(0)>>8,0,0,0,TrackNum);
			if(ThingCount(T_NONE,TrackNum) == 1)//проверить на наличие совпадающего tid.
			{
				tracked_tids[i] = TrackNum;
				return i;
			}
			else
			{
				j++;
				i--;
				continue;
			}
		}
	}
	//there was no room: replace for weakest monster
	j = 0;
	int lowestHP = INT_MAX;
	int hp;
	for(i = 1; i < MAX_TRACKERS; i++)
	{
		hp = percent(tracked_hps[i],tracked_max_hps[i],100,true);
		if(hp < lowestHP)
		{
			j = i;
			lowestHP = hp;
		}
	}
	if(j > 0)
	{
		TrackNum = UniqueTID(0,0);
		SpawnProjectile(0,"hpbar-tracker",GetActorAngle(0)>>8,0,0,0,TrackNum);
		tracked_tids[j] = TrackNum;
		return j;
	}
	return 0;
}

function str hpp_to_color(int p)
{
	if(p <= 25)return "\c[d4]";
	else if(p <= 50)return "\c[o4]";
	else if(p <= 75)return "\c[e9]";
	else if(p <= 100)return "\c[m4]";
	return "\c[x5]";
}

function void HPBarLineStateMsg(str statemsg, int ln)
{
	HudMessageBold(s:statemsg; HUDMSG_FADEOUT, HUD_TEXT_TARGET_PROP_ID + ln, CR_WHITE, FULL_HPBAR_X, FULL_INFO_Y + to_fixed(ln * 10), FULL_HOLDTIME, FULL_FADETIME);
}

function void show_full_hpbar(int hp, int max_hp, int hp_percentage, str name, bool invul, bool friendly, bool reflect)
{
	SetHudSize(FULL_HUD_WIDTH, FULL_HUD_HEIGHT, true);
	if(hp_percentage > 100)
	{
		SetFont(StrParam(s:"FILL",i:percent(hp,max_hp,14,false)));
	}
	else
	{
		SetFont(StrParam(s:"FILL",i:hp_percentage/10));
	}
	for(int i = 0; (i <= 100) && (i <= hp_percentage); i++)
	{
		HudMessageBold(s:"A"; HUDMSG_FADEOUT, HUD_LINE_PERCENT_ID + i, CR_UNTRANSLATED, FULL_HPBAR_X - 97.0 + to_fixed(i * 2), FULL_HPBAR_Y, FULL_HOLDTIME, FULL_FADETIME);
	}
	SetFont("HPBAR");
	HudMessageBold(s:"A"; HUDMSG_FADEOUT, HUD_LINE_BAR_ID, CR_UNTRANSLATED, FULL_HPBAR_X, FULL_HPBAR_Y, FULL_HOLDTIME, FULL_FADETIME);
	SetFont(DEFAULT_FONT);
	HudMessageBold(d:hp, s:" / ", d:max_hp, s:" (", d:hp_percentage, s:"%)";HUDMSG_FADEOUT, HUD_TEXT_PERCENT_ID, CR_WHITE, FULL_HPBAR_X, FULL_HPBAR_Y, FULL_HOLDTIME, FULL_FADETIME);
	HudMessageBold(s:name; HUDMSG_FADEOUT, HUD_TEXT_TARGET_NAME_ID, CR_WHITE, FULL_HPBAR_X, FULL_NAME_Y, FULL_HOLDTIME, FULL_FADETIME);
	int ln = 0;
	if(reflect)
	{
		HPBarLineStateMsg("\c[x5]Reflective\c-",ln);
		ln++;
	}
	if(invul)
	{
		HPBarLineStateMsg("\c[i8]Invulnerable\c-",ln);
		ln++;
	}
	if(friendly)
	{
		HPBarLineStateMsg("\c[i7]Friendly\c-",ln);
		ln++;
	}
}

function void show_minimal_hpbar(int hp_percentage)
{
	SetHudSize(MINIMAL_HUD_WIDTH, MINIMAL_HUD_HEIGHT, false);
	SetFont(DEFAULT_FONT);
	HudMessageBold(s:hpp_to_color(hp_percentage), d:hp_percentage, s:"%\c-";HUDMSG_FADEOUT, HUD_TEXT_PERCENT_ID, CR_UNTRANSLATED, MINIMAL_HP_X, MINIMAL_HP_Y, MINIMAL_HOLDTIME, MINIMAL_FADETIME);
}

function void announce(int priority, str sound, str bigtext, str smalltext, str tinytext)
{
	if (priority >= announcer_priority)
	{
		// Increment here so the it is seen within the same tic.
		announcers_playing += 1;
		announcer_priority = priority;
		SetCVarString("hpbar_announcer_sound",sound);
		SetCVarString("hpbar_announcer_bigtext",bigtext);
		SetCVarString("hpbar_announcer_smalltext",smalltext);
		SetCVarString("hpbar_announcer_tinytext",tinytext);
		SetCVar("hpbar_announcer_id",announcer_id++);
		ACS_NamedExecuteAlways("HPBar_Announcer",0,announcer_id);
		ACS_NamedExecuteAlways("HPBar_AnnouncerCooldown",0);
	}
}

function bool streq(str x, str y)
{
	return (StrICmp(x,y) == 0);
}

//Костыль заменяющий управляющие символы на текст.
function str ccunescape_impl(str s, int n)
{
	if(streq(s,"") || (n >= strlen(s)))return "";
	for(int i = n; i < (strlen(s)-1); i++)
	{
		if((GetChar(s,i) == '\\') && (GetChar(s,i+1) == 'c'))
		{
			return strparam(s:strmid(s,n,i-n), s:"\c", s:ccunescape_impl(s,i+2));
		}
	}
	return strmid(s,n,strlen(s));
}

function str ccunescape(str s)
{
	return ccunescape_impl(s,0);
}

//Имена не могут быть объявлены как cvars из-за специальных символов, поэтому уладяем эти символы.
function str normalize_class_impl(str s, int n)
{
	if(streq(s,"") || (n >= strlen(s)))return "";
	for(int i = n; i < strlen(s); i++)
	{
		if(GetChar(s,i) == '~')
		{
			return strparam(s:strmid(s,n,i-n), s:normalize_class_impl(s,i+1));
		}
	}
	return strmid(s,n,strlen(s));
}

function str normalize_class(str s)
{
	str nclass = normalize_class_impl(s,0);
	str mclass = GetCVarString(strparam(s:"hpbar_map_", s:nclass));
	if(mclass != 0)
	{
		return mclass;
	}
	return nclass;
}

function str get_actor_name(void)
{
	if(ActorIsPlayer(0))
	{
		return strparam(n:0);
	}
	str class = GetActorClass(0);
	str name = GetCVarString(strparam(s:"hpbar_name_", s:class));
	if(name != 0)
	{
		return ccunescape(name);
	}
	str mname = GetCVarString(strparam(s:"hpbar_name_", s:normalize_class(class)));
	if(mname != 0)
	{
		return ccunescape(mname);
	}
	return ccunescape(GetActorProperty(0,APROP_NameTag));
}

function bool should_track(void)
{
	str class = GetActorClass(0);
	int boss = GetCVar(strparam(s:"hpbar_track_", s:class));
	if(boss == 1)
	{
		return true;
	}
	else if(boss == -1)
	{
		return false;
	}
	boss = GetCVar(strparam(s:"hpbar_track_", s:normalize_class(class)));
	if(boss == 1)
	{
		return true;
	}
	else if(boss == -1)
	{
		return false;
	}
	if(CheckFlag(0,"BOSS"))
	{
		return true;
	}
	return (GetActorProperty(0,APROP_SpawnHealth) >= GetCVar("hpbar_tracker_threshold"));
}

function bool get_actor_invul(void)
{
	return (CheckFlag(0,"INVULNERABLE") || (!CheckFlag(0,"SHOOTABLE")) || CheckFlag(0,"NODAMAGE"));
}

function void request_broadcast_tracker_info(void)
{
	for(int i = 0; i < MAX_TRACKERS; i++)
	{
		if(tracked_tids[i] != INVALID_TID)
		{
			tracked_broadcast[i] = true;
		}
	}
}
//==============================================================================
script "Copy_tracked_tid_and_MaxHP_to_Clientside" (int i, int tid, int max_hps) CLIENTSIDE
{
	tracked_tids[i] = tid;
	tracked_max_hps[i] = max_hps;
}

script "Copy_HP_and_Kills_to_Clientside" (int i, int hp, int kills) CLIENTSIDE
{
	tracked_hps[i] = hp;
	tracked_kills[i] = kills;
}

script "Copy_Invul_Reflect_Friendly_to_Clientside" (int i, int invul, int reflect, int friendly) CLIENTSIDE
{
	tracked_invul[i] = invul;
	tracked_reflect[i] = reflect;
	tracked_friendly[i] = friendly;
}
//==============================================================================
//Очистка списков на срвере
script "HPBar_Open" OPEN
{
	clear_tracklist();
	int MaxPlayers = MaxPlayersInGame();
	int OldPlayers,Players,i;
	while(1)
	{
		OldPlayers = Players;
		Players = 0;
		for(i = 0; i < MaxPlayers; i++)
		{
			if((PlayerInGame(i) || (PlayerIsSpectator(i) == 1)) && !PlayerIsBot(i))
			{
				Players++;
			}
		}
		if(OldPlayers != Players)
		{
			request_broadcast_tracker_info();
		}
		Delay(35);
	}
}

script "HPBar_ReOpen" REOPEN
{
	int MaxPlayers = MaxPlayersInGame();
	int OldPlayers,Players,i;
	while(1)
	{
		OldPlayers = Players;
		Players = 0;
		for(i = 0; i < MaxPlayers; i++)
		{
			if((PlayerInGame(i) || (PlayerIsSpectator(i) == 1)) && !PlayerIsBot(i))
			{
				Players++;
			}
		}
		if(OldPlayers != Players)
		{
			request_broadcast_tracker_info();
		}
		Delay(35);
	}
}

//Запуск трекера на клиенте.
script "HPBar_Open-cs" OPEN CLIENTSIDE
{
	delay(random(30,40));
	int x,y,rank,hp_limit,maxhp_limit,i,tid,max_hp,hp,n,hpp,kills;
	bool friendly,friendly_show;
	str name,statemsg,killsmsg;
	SetHudSize(TRACKER_HUD_WIDTH, TRACKER_HUD_HEIGHT, false);
	while(true)
	{
		delay(1);
		if(GetCVar("hpbar_tracker"))
		{
			x = to_int((GetCVar("hpbar_tracker_x") - 0.5) * GetScreenWidth() / GetScreenHeight() * TRACKER_HUD_HEIGHT) + (TRACKER_HUD_WIDTH / 2);
			y = to_fixed(to_int((GetCVar("hpbar_tracker_y") - 0.5) * GetScreenHeight()) + (TRACKER_HUD_HEIGHT / 2));
			friendly_show = get_bool_user_cvar("hpbar_show_friendly");
			for(rank = 0; rank < NUM_RANKINGS; rank++)
			{
				hp_limit = 0;
				maxhp_limit = 0;
				maxhp_rankings[rank] = -1;
				for(i = 1; i < MAX_TRACKERS; i++)
				{
					tid = tracked_tids[i];
					if((tid != INVALID_TID) && (already_selected(i,rank) == false))
					{
						max_hp = tracked_max_hps[i];
						hp = tracked_hps[i];
						friendly = tracked_friendly[i];
						if((max_hp > maxhp_limit) && (!friendly || friendly_show))
						{
							maxhp_rankings[rank] = i;
							maxhp_limit = max_hp;
							hp_limit = hp;
						}
						else if((max_hp == maxhp_limit) && (hp > hp_limit) && (!friendly || friendly_show))
						{
							maxhp_rankings[rank] = i;
							hp_limit = hp;
						}
					}
				}
				n = maxhp_rankings[rank];
				if(n != -1)
				{
					hp = tracked_hps[n];
					max_hp = tracked_max_hps[n];
					hpp = percent(hp,max_hp,100,true);
					name = GetCVarString(strparam(s:"hpbar_tracked_names", d:n));
					statemsg = " ";
					if(tracked_reflect[n])statemsg = strparam(s:statemsg, s:"\c[x5][REFLECT]\c-");
					if(tracked_invul[n])statemsg = strparam(s:statemsg, s:"\c[i8][INVUL]\c-");
					if(tracked_friendly[n])statemsg = strparam(s:statemsg, s:"\c[i7][FRIENDLY]\c-");
					killsmsg = "";
					if(GetCVar("hpbar_rekt"))
					{
						kills = tracked_kills[n];
						if(kills >= 10)
						{
							killsmsg = strparam(s:" \c[a6](", d:kills, s:" rekts)\c-");
						}
						else if(kills >= 5)
						{
							killsmsg = strparam(s:" \cg(", d:kills, s:" rekts)\c-");
						}
						else if(kills >= 2)
						{
							killsmsg = strparam(s:" \cr(", d:kills, s:" rekts)\c-");
						}
						else if(kills >= 1)
						{
							killsmsg = " \cm(1 rekt)\c-";
						}
					}
					HudMessage(s:hpp_to_color(hpp), d:hp, s:"/", d:max_hp, s:"\c-";HUDMSG_FADEOUT, HUD_TEXT_TRACKER_NAME_ID + rank, CR_WHITE, hpbar_align_right(x + 80), y + rank * 12.0, MINIMAL_HOLDTIME, MINIMAL_FADETIME);
					HudMessage(s:hpp_to_color(hpp), d:hpp, s:"%\c-";HUDMSG_FADEOUT, HUD_TEXT_TRACKER_NAME_ID + NUM_RANKINGS + rank, CR_WHITE, hpbar_align_right(x + 120), y + rank * 12.0, MINIMAL_HOLDTIME, MINIMAL_FADETIME);
					HudMessage(s:name, s:killsmsg, s:statemsg;HUDMSG_FADEOUT, HUD_TEXT_TRACKER_NAME_ID + NUM_RANKINGS * 2 + rank, CR_WHITE, hpbar_align_left(x + 132), y + rank * 12.0, MINIMAL_HOLDTIME, MINIMAL_FADETIME);
				}
				else
				{
					break;
				}
			}
		}
	}
}

script "HPBar_Enter" ENTER
{
	delay(1);
	ACS_NamedExecuteAlways("HPBar_HitTarget",0);
}

script "HPBar_Respawn" RESPAWN
{
	delay(1);
	ACS_NamedExecuteAlways("HPBar_HitTarget",0);
}

script "HPBar_HitTarget" (void)
{
	int p_num = PlayerNumber();
	if(GetCVar("hpbar_rekt"))SetThingSpecial(0,ACS_NamedExecuteAlways,"HPBar_Rect",0,p_num);
	while(PlayerIsSpectator(p_num) == 0)
	{
		if(ActorIsAlive(0))LineAttack(0,GetActorAngle(0),GetActorPitch(0),0,"hpbar-testing-puff","None",8192.0,FHF_NORANDOMPUFFZ|FHF_NOIMPACTDECAL,0);
		else break;
		delay(1);
		if(ActorIsAlive(0))LineAttack(0,GetActorAngle(0),GetActorPitch(0),0,"hpbar-testing-thru-puff","None",8192.0,FHF_NORANDOMPUFFZ|FHF_NOIMPACTDECAL,0);
		else break;
		delay(1);
	}
}

script "HPBar_GetTarget" (void)
{
	int PuffTID = HPBarSetTid();
	if(SetActivator(0,AAPTR_TARGET) == 1)
	{
		int p_num = PlayerNumber();
		if((p_num >= 0) && (SetActivator(PuffTID,AAPTR_TRACER) == 1) && ActorIsAlive(0))
		{
			int hp = GetActorProperty(0,APROP_Health);
			int max_hp = GetActorProperty(0,APROP_SpawnHealth);
			if(max_hp <= 0)max_hp = hp;
			if(max_hp > 0)
			{
				if(max_hp >= GetCVar("hpbar_threshold"))
				{
					ACS_NamedExecuteAlways("HPBar_LinebarView",0,p_num,hp,max_hp);
				}
				if(GetCVar("hpbar_tracker") && (CheckInventory("hpbar-tracker-cooldown") < 1))
				{
					GiveInventory("hpbar-tracker-cooldown",1);
					ACS_NamedExecuteAlways("HPBar_TrackerView",0,0);
				}
			}
		}
	}
}

//Скрипт выпоняется от имени цели (монстра).
script "HPBar_LinebarView" (int p_num, int hp, int max_hp) CLIENTSIDE
{
	if(ConsolePlayerNumber() == p_num)
	{
		int hp_percentage = percent(hp,max_hp,100,true);
		bool invul = get_actor_invul();
		bool friendly = CheckFlag(0,"FRIENDLY");
		bool reflect = CheckFlag(0,"REFLECTIVE");
		if(!friendly || get_bool_user_cvar("hpbar_show_friendly"))
		{
			int style = GetUserCVar(p_num,"hpbar_style");
			if(style == STYLE_FULL)
			{
				show_full_hpbar(hp, max_hp, hp_percentage, get_actor_name(), invul, friendly, reflect);
			}
			else if(style == STYLE_MINIMAL)
			{
				show_minimal_hpbar(hp_percentage);
			}
		}
	}
}

//Отслеживание монстра попавшего в прицел, цикл проверки работает пока он жив.
script "HPBar_TrackerView" (int force_track)
{
	// We only track monsters. :)
	int tracked_tid = CheckInventory("MonsterAlreadyTracked");
	if(ActorIsMonster(0) && (GetActorProperty(0,APROP_SpawnHealth) > 0) && ((tracked_tid < 1) || !(ActorIsExists(tracked_tid) && CheckActorClass(tracked_tid,"hpbar-tracker"))))
	{
		// Should we track it?
		if((force_track == 1) || should_track())
		{
			//Найти пустой слот, получить трек номер, создать актор трекера.
			int i = GetOrSetMonsterTrackNum();
			if(i > 0)//Если не нашлось места в списке - остановить скрипт.
			{
				GiveInventory("MonsterAlreadyTracked",tracked_tids[i]);//Выдать трекномер монстру для отслеживания повторов.
				tracked_tid = tracked_tids[i];
				int old_hp,old_kills;
				bool old_invul,old_reflect,old_friendly;
				str name = HPBarGetActorInfo(i);
				str name_cvar = strparam(s:"hpbar_tracked_names", d:i);
				tracked_broadcast[i] = true;
				while(ActorIsExists(tracked_tid) && CheckActorClass(tracked_tid,"hpbar-tracker"))
				{
					if(SetActivator(tracked_tid) == 1)//переключение на трекер.
					{
						SetUserVariable(0,"user_tracked_num",i);
						SetActorProperty(0,APROP_ReactionTime,35);
						if(tracked_broadcast[i])
						{
							ACS_NamedExecuteWithResult("Copy_tracked_tid_and_MaxHP_to_Clientside",i,tracked_tids[i],tracked_max_hps[i]);
						}
						if(tracked_broadcast[i] || (old_hp != tracked_hps[i]) || (old_kills != tracked_kills[i]))
						{
							ACS_NamedExecuteWithResult("Copy_HP_and_Kills_to_Clientside",i,tracked_hps[i],tracked_kills[i]);
						}
						if(tracked_broadcast[i] || (old_invul != tracked_invul[i]) || (old_reflect != tracked_reflect[i]) || (old_friendly != tracked_friendly[i]))
						{
							ACS_NamedExecuteWithResult("Copy_Invul_Reflect_Friendly_to_Clientside",i,tracked_invul[i],tracked_reflect[i],tracked_friendly[i]);
						}
						if(tracked_broadcast[i] || (!streq(GetCVarString(strparam(s:"hpbar_tracked_names", d:i)),name)))
						{
							tracked_broadcast[i] = false;
							SetCVarString(name_cvar,name);
						}
						// Send monster HP
						old_hp = tracked_hps[i];
						old_kills = tracked_kills[i];
						// Send monster invul, reflect, friendly
						old_invul = tracked_invul[i];
						old_reflect = tracked_reflect[i];
						old_friendly = tracked_friendly[i];
						delay(1);
						if(SetActivator(0,AAPTR_TARGET) == 1)//переключение на монстра.
						{
							if(ActorIsAlive(0) && (tracked_tid == tracked_tids[i]))
							{
								name = HPBarGetActorInfo(i);
							}
							else
							{
								break;
							}
						}
						else
						{
							break;
						}
					}
					else
					{
						break;
					}
				}
				// The monster is dead, remove it from the slot and tell clients to stop tracking it.
				if(tracked_tid == tracked_tids[i])
				{
					HPBarResetActorInfo(i);
					ACS_NamedExecuteWithResult("Copy_tracked_tid_and_MaxHP_to_Clientside",i,INVALID_TID,0);
				}
				if((SetActivator(tracked_tid) == 1) && CheckActorClass(tracked_tid,"hpbar-tracker"))
				{
					SetUserVariable(0,"user_tracked_num",0);
					if(SetActivator(0,AAPTR_TARGET) == 1)
					{
						TakeInventory("MonsterAlreadyTracked",INT_MAX);
					}
				}
				else
				{
					TakeInventory("MonsterAlreadyTracked",INT_MAX);
				}
			}
		}
	}
}

script "HPBar_TargetDeath" (void) //Костыль для сетевого говнокода.
{
	//The monster is dead, remove it from the slot and tell clients to stop tracking it.
	int i = GetUserVariable(0,"user_tracked_num");
	if(i > 0)
	{
		HPBarResetActorInfo(i);
		ACS_NamedExecuteWithResult("Copy_tracked_tid_and_MaxHP_to_Clientside",i,INVALID_TID,0);
		Thing_ChangeTID(0,0);
		if(SetActivator(0,AAPTR_TARGET) == 1)
		{
			TakeInventory("MonsterAlreadyTracked",INT_MAX);
		}
	}
	else
	{
		Thing_ChangeTID(0,0);
	}
}

//Скрипт выполняется от имени убившего игрока монстра или от имени самого игрока при самоубийстве.
script "HPBar_Rect" (int p_num)
{
	if(GetCVar("hpbar_tracker"))
	{
		ACS_NamedExecuteAlways("HPBar_TrackerView",0,1);
	}
	GiveInventory("MonsterScore",1); // Total score
	GiveInventory("MonsterScoreTemporary",1); // Temporary score
	int score = CheckInventory("MonsterScore");
	int score_temp = CheckInventory("MonsterScoreTemporary");
	ACS_NamedExecuteAlways("HPBar_ShowScore",0,score,score_temp);
	if(!firstblood)
	{
		if((PlayerNumber() == p_num) || ((ClassifyActor(0) & ACTOR_WORLD) == ACTOR_WORLD))
		{
			int gender = GetPlayerInfo(p_num,PLAYERINFO_GENDER);
			str killstr = "";
			if (gender == 0) killstr = "Killed himself";
			else if (gender == 1) killstr = "Killed herself";
			else killstr = "Killed itself";
			announce(1,"hpbar/firstblood","\c[d4]FIRST DUMB\c-",strparam(n:p_num+1),killstr);
		}
		else
		{
			announce(1,"hpbar/firstblood","\c[d4]FIRST BLOOD\c-",get_actor_name(),"First kill on the map");
		}
		firstblood = true;
	}
	// Wait for 5 seconds. If the monster didn't score other kills in the mean time, reset its temporary score.
	delay(35 * 5);
	if(CheckInventory("MonsterScoreTemporary") == score_temp)
	{
		TakeInventory("MonsterScoreTemporary", score_temp);
	}
}

script "HPBar_ShowScore" (int score, int score_temp)
{
	if(ActorIsMonster(0) && (GetActorProperty(0,APROP_SpawnHealth) > 0))
	{
		str name = get_actor_name();
		if(score_temp == 2)
		{
			announce(100+score_temp,"hpbar/doublekill","\c[d4]DOUBLE KILL\c-",name,"2 consecutive kills");
		}
		else if(score_temp == 3)
		{
			announce(100+score_temp,"hpbar/multikill","\c[d4]MULTI KILL\c-",name,"3 consecutive kills");
		}
		else if(score_temp == 4)
		{
			announce(100+score_temp,"hpbar/megakill","\c[d4]MEGA KILL\c-",name,"4 consecutive kills");
		}
		else if(score_temp == 5)
		{
			announce(100+score_temp,"hpbar/ultrakill","\c[d4]ULTRA KILL\c-",name,"5 consecutive kills");
		}
		else if(score_temp == 6)
		{
			announce(100+score_temp,"hpbar/monsterkill","\c[d4]M-M-MONSTER KILL!\c-",name,"6 consecutive kills");
		}
		else if(score_temp == 7)
		{
			announce(100+score_temp,"hpbar/ludicrouskill","\c[d4]L U D I C R O U S  K I L L !\c-",name,"7 consecutive kills");
		}
		else if((score_temp == 8) || (score_temp == 9))
		{
			announce(100+score_temp,"hpbar/holyshit","\c[m6]! ! ! H O L Y  S H I T ! ! !\c-",name,strparam(d:score_temp,s:" consecutive kills"));
		}
		else if(score_temp >= 10)
		{
			announce(100+score_temp,"hpbar/sexyholyshit","\c[m6]! ! ! H O L Y  S H I T ! ! !\c-",name,strparam(d:score_temp,s:" consecutive kills"));
		}
		// Wait until nothing is playing.
		while(announcers_playing > 0)delay(1);
		// Skip the announcement if the monster has gained another tier during the wait.
		if((score == 3) && (CheckInventory("MonsterScore") < 5))
		{
			announce(2,"hpbar/killingspree","\c[l5]KILLING SPREE\c-",name,"3 total kills");
		}
		else if((score == 5) && (CheckInventory("MonsterScore") < 8))
		{
			announce(3,"hpbar/rampage","\c[l5]RAMPAGE\c-",name,"5 total kills");
		}
		else if((score == 8) && (CheckInventory("MonsterScore") < 10))
		{
			announce(4,"hpbar/dominating","\c[d4]DOMINATING\c-",name,"8 total kills");
		}
		else if((score == 10) && (CheckInventory("MonsterScore") < 15))
		{
			announce(5,"hpbar/unstoppable","\c[k9]UNSTOPPABLE\c-",name,"10 total kills");
		}
		else if((score == 15) && (CheckInventory("MonsterScore") < 25))
		{
			announce(6,"hpbar/godlike","\c[k9]G O D L I K E !\c-",name,"15 total kills");
		}
		else if(score == 25)
		{
			announce(7,"hpbar/wickedsick","\c[n3]W I C K E D  S I C K !\c-",name,"25 total kills");
		}
	}
}

script "HPBar_Announcer" (int announcer_id_) CLIENTSIDE
{
	if(get_bool_user_cvar("hpbar_announcer"))
	{
		if(GetCVar("hpbar_announcer_id") != announcer_id_) terminate;
		str sound = GetCVarString("hpbar_announcer_sound");
		str bigtext = GetCVarString("hpbar_announcer_bigtext");
		str smalltext = GetCVarString("hpbar_announcer_smalltext");
		str tinytext = GetCVarString("hpbar_announcer_tinytext");
		StopSound(0,5);
		StopSound(0,6);
		StopSound(0,7);
		PlaySound(0,sound,5|CHAN_NOPAUSE,1.0,false,ATTN_NONE);
		PlaySound(0,sound,6|CHAN_NOPAUSE,1.0,false,ATTN_NONE);
		PlaySound(0,sound,7|CHAN_NOPAUSE,1.0,false,ATTN_NONE);
		SetHudSize(800,600,true);
		SetFont(DEFAULT_FONT);
		HudMessageBold(s:smalltext; HUDMSG_FADEOUT, HUD_TEXT_ANN_KILLER_NAME_ID, CR_WHITE, 400.0, 125.2, ANNOUNCER_HOLDTIME, ANNOUNCER_FADETIME);
		HudMessageBold(s:tinytext; HUDMSG_FADEOUT, HUD_TEXT_ANN_TAUNT_ID, CR_WHITE, 400.0, 150.1, ANNOUNCER_HOLDTIME, ANNOUNCER_FADETIME);
		SetHudSize(640,480,true);
		SetFont("BIGFONT");
		HudMessageBold(s:bigtext; HUDMSG_FADEOUT, HUD_TEXT_ANN_KILLER_SCORE_ID, CR_UNTRANSLATED, 320.0, 104.1, ANNOUNCER_HOLDTIME, ANNOUNCER_FADETIME);
		Log(s:smalltext, s:": ", s:bigtext);
	}
}

script "HPBar_AnnouncerCooldown" (void)
{
	delay(35 * 3);
	announcers_playing -= 1;
	if(announcers_playing <= 0)
	{
		announcer_priority = -1;
	}
}
